var P=(m,i,p)=>{let g=typeof i=="number"?{interval:i,maxExecutions:p,immediate:!0}:i,{interval:u,maxExecutions:l=0,immediate:b=!1,continueOnError:v=!1,onComplete:c,onError:d,signal:s}=g,r=0,e=null,n="stopped",E=async()=>{try{await Promise.resolve(m())}catch(a){return d&&a instanceof Error&&d(a),v?!0:(t(),!1)}return!0},o=async()=>{if(n!=="running")return;if(s?.aborted){t();return}if(await E()){if(r++,l>0&&r>=l){t(),c&&c();return}n==="running"&&(e=setTimeout(o,u))}},f=()=>{n!=="running"&&(n="running",b?o():e=setTimeout(o,u))},t=()=>{e&&(clearTimeout(e),e=null),n="stopped"},x=()=>{n==="running"&&(e&&(clearTimeout(e),e=null),n="paused")},F=()=>{n==="paused"&&(n="running",e=setTimeout(o,u))},w=()=>{t(),r=0,f()},y=()=>n,C=()=>r;return f(),s&&s.addEventListener("abort",t,{once:!0}),typeof window<"u"&&window.addEventListener("beforeunload",t),{stop:t,pause:x,resume:F,restart:w,getStatus:y,getCount:C}};export{P as a};
